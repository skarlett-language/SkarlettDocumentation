#
Casting functions
#

number = 32.8

int(number)     # -> 32       #
float(number)    # -> 32.8     #
hexa(number)    # -> hx20     #
bin(number)     # -> bx000001 #
bool(number)    # -> true     #
string(number)  # -> '32.8'   #

#
Input and output
  - displays in the console the provided value or variable
#

show('Hello world!')

#
  - gets typed text from the console, displaying the provided text
#

get('Enter your name: ')


#
Type
  - returns the type of the provided value or variable
#

type(hxF1)   # -> hexanumber #


#
Size
  - function which returns the size of a provided value or variable
  - can be used with strings, lists and binary numbers
#

size(bx011001)   # -> 6 #

#
Square bracket getter
  - works with strings, lists and binary numbers
  - takes an index as a "parameter"
#

testVariable = 'Skarlett'

testVariable[1]    # -> k #


#
Fragment
  - gets three parameters: the value or variable, the starting index and the endingIndex
  - can be used with strings, lists and binary numbers
  - returns the same type of the provenience variable
#

testList = []
testList += 5
testList += hxF1
testList += bx010011
testList += 'Skarlett'

fragment(testList, 1, 4)   # -> [hxF1, bx010011, 'Skarlett'] #


#
Split
  - two forms
    - binary
    - string
  - the binary version splits the provided binary number into a list of integers
  - the string version takes as parameters the string and a char to use as target for splitting the string
#

binSplit(bx01001)  # -> [0, 1, 0, 0, 1]

split('Skarlett programming is great')   # -> ['Skarlett', 'programming', 'is', 'great']


#
Join
  - two forms
    - binary
    - string
  - the binary version turns a list of zeroes and ones into a binary number (zeros and ones must be in integer, hexadecimal or binary form)
  - the string version takes a list containing any other type, and a separator character or string, returning a string containing all teh elements in the list separated by the separator
#

binList = []
binList += 1
binList += hx0
binList += bx1

binJoin(binList)    # -> bx101 #

list = []
list += 'This'
list += 'is'
list += 'a'
list += 'string'

join(list, ' ')   # -> 'This is a list' #